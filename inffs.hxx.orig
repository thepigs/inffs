#include <errno.h>
#include <fcntl.h>
#include <malloc.h>
#include <string.h>
#include <iostream>
#include <list>
#include <deque>
#include <vector>
#include <utility>
#include <algorithm>
#include <stdexcept>
#include "mutex.hxx"

#define FUSE_USE_VERSION 26
#define PAGE_SIZE 4096
#define FILL_CHAR 0x20
#include <fuse.h>

using namespace std;

class file_data
{
public:
 char data[PAGE_SIZE];
 size_t ofs;
 size_t len;
 file_data(off_t _ofs, size_t _len) : ofs(_ofs), len(_len) {  memset(&data, 0, sizeof(data)); }

};
class folder;
class entry{
	folder* _parent;
        string _name;
public:
        string& name() { return _name; }
	void set_name(const char* name) { _name=name; }
        folder* parent() const { return _parent; }
        virtual bool is_file() { return false; }
        virtual bool is_folder() { return false; }
        virtual ~entry(){}
        entry(folder* p, string& name) : _parent(p),_name(name){  
		memset(&stbuf, 0, sizeof(struct stat)); 
	}
	struct stat stbuf;
	virtual void chmod(mode_t mode)=0;
};

typedef deque<file_data> file_data_t;

class file : public entry{

public:
        file(folder* parent, string& name) : entry(parent,name) {
	 chmod(0444);
         stbuf.st_nlink = 1;
	}
        file_data_t data;
        bool is_file() { return true; }
	void chmod(mode_t mode){stbuf.st_mode=mode|S_IFREG;}

	file_data_t::iterator seek_forward(off_t ofs)
	{
	    for (file_data_t::iterator i=data.begin();i!=data.end();++i)
        	if (ofs<i->ofs+i->len)
                	return i;
	    return data.end();
	}
	file_data_t::iterator seek_backward(off_t ofs)
	{
	    for (file_data_t::iterator i=data.end();i!=data.begin();)
	    {
		--i;
        	if (ofs>=i->ofs)
                	return i;
	    }
	    return data.begin();
	}
};

typedef vector<entry*> entries_t;
class folder : public entry{

public:
        folder(folder* parent,string& name) : entry(parent,name) {
          chmod(0755);
	  stbuf.st_nlink=2;
	}
        bool is_folder() { return true; }
	void chmod(mode_t mode){stbuf.st_mode=mode|S_IFDIR;}

	void add(entry* e) {
		entries.push_back(e);
		stbuf.st_nlink++;
	}

	void remove(entry* e) {
	    entries.erase(std::find(entries.begin(),entries.end(),e));
	    stbuf.st_nlink--;
	}

        entry* find(string& name){
         for (entries_t::iterator it=entries.begin();it!=entries.end();it++){
                if ((*it)->name()==name)
                        return *it;
         }
         return 0;
        }

        entry* find_path(string& path){
                size_t found = path.find_first_of('/');
                if (found==string::npos){
                        return find(path);
		}
                else{
                        string part=path.substr(0,found);
                        entry* e=find(part);
			if (!e->is_folder()) throw -ENOTDIR;
                        folder* f = static_cast<folder*>(e);
                        part=path.substr(found+1);
                        return f->find_path(part);
                }
        }
        entries_t entries;

};

